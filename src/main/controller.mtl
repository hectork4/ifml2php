[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module controller('http://www.application.org/coreMVC')]

[import services::helperFileReader /]
[import files::writeController /]
[import services::helperApplication /]
[import services::helperLaravelPaths /]
[import services::helperLaravelInputPaths /]
[import services::helperLaravelOutputPaths /]

[**
 * The documentation of the template generateElement.
 * @param aModel
 */]

[comment]La plantilla utilizada para los modelos y los controladores es la generada por el uso del comando php artisan make:[controller|model] <name> --resource[/comment]

[template public makeControllers(anApp : Application)]
[comment @main/]  
[let base_dir : String = getBaseDir() ]
   [let path : String = getControllersHome() + anApp.aPackageController.name + 'Controllers/']
       [self.makeFolder(base_dir + path) /]
	   [writePHPTag(getRoutesPath()) /]
       [for (controller : Controller | anApp.aPackageController.controllers)]
        [if (anApp.name.oclIsUndefined() or anApp.name = '')]
			[comment][ writeControllerSkeleton(path, controller, getDefaultAppName('Laravel'), anApp.aPackageModel.name) /][/comment]
			[ writeControllerSkeleton(path, controller, getDefaultAppName('Laravel'), anApp ) /]

		[else]
        	[comment][ writeControllerSkeleton(path, controller, anApp.name, anApp.aPackageModel.name) /][/comment]
        	[ writeControllerSkeleton(path, controller, anApp.name, anApp) /]
		[/if]
		  [ writeViewConstructors(path, controller.name, anApp.aPackageView ) /]
		  [ registerController(controller.name, anApp.aPackageController.name, anApp.aPackageView) /]    	   
	[/for]
    [/let]
[/let]
[/template]